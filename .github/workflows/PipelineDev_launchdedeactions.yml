name: Terraform EC2


on:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.7.5
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply      
      run: terraform apply -auto-approve -var="aws_access_key=${{ env.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}"

    - name: Terraform Show      
      run: terraform show

    - name: Export Output
      id: tfo
      run: | 
         echo "instance_ip=$(terraform output -raw instance_ip_Pagos_dev)" >> $GITHUB_OUTPUT

    - name: Temporizador de 10 segundos para que se termine de lanzar la EC2
      run: |
          echo "Iniciando temporizador de 10 segundos..." 
          sleep 10 # 
          echo "Temporizador de 10 segundos completado. Continuando con las siguientes acciones."

    - name: Install Packages
      uses: appleboy/ssh-action@master
      with:
        host: ${{ steps.tfo.outputs.instance_ip }}
        username: ec2-user
        key: ${{ secrets.PEM_EC2_PAGOS }}
        script: |
            sudo yum install -y nodejs npm git
        
    - name: Create Working Directory
      uses: appleboy/ssh-action@master
      with:
          host: ${{ steps.tfo.outputs.instance_ip}}
          username: ec2-user
          key: ${{ secrets.PEM_EC2_PAGOS }}
          script: |
              if [ -d "/opt/WorkingDirectoryPagos" ]; then
              sudo rm -rf /opt/WorkingDirectoryPagos
              fi
              sudo mkdir /opt/WorkingDirectoryPagos
              cd /opt/WorkingDirectoryPagos
      
    - name: Clone Repository T2-Devops
      uses: appleboy/ssh-action@master
      with:
          host: ${{ steps.tfo.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.PEM_EC2_PAGOS }}
          script: |
            sudo git clone https://${{ secrets.PAT }}@github.com/FedeMerayo/DevOps-T2.git /opt/WorkingDirectoryPagos
            

    - name: Install NPM Packages
      uses: appleboy/ssh-action@master
      with:
          host: ${{ steps.tfo.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.PEM_EC2_PAGOS }}
          script: |
              sudo npm install express
              sudo npm install -g pm2
              sudo npm install -g npm@10.5.1

    
    - name: Start Node Service
      uses: appleboy/ssh-action@master
      with:
          host: ${{steps.tfo.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.PEM_EC2_PAGOS }}
          script: |
            pm2 kill
            if ! pm2 list | grep -q 'app'; then
            pm2 start -f /opt/WorkingDirectoryPagos/app.js
            fi
         
    - name: Check Status
      uses: appleboy/ssh-action@master
      with:
          host: ${{ steps.tfo.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.PEM_EC2_PAGOS }}
          script: |
            if pm2 list | grep -q 'app'; then
            echo "La aplicaci칩n est치 corriendo."
            else
            echo "La aplicaci칩n no est치 corriendo."
            fi

    - name: Temporizador para acceder a la IP desde navegador
      run: |
          echo "Iniciando temporizador de 60 segundos..." 
          sleep 90 # 
          echo "Temporizador de 10 segundos completado. Continuando con las siguientes acciones."

    - name: Terraform Destroy
      run: |
        terraform destroy -auto-approve -var="aws_access_key=${{ env.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}"
